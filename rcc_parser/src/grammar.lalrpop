use std::str::FromStr;
use crate::ast::*;

grammar;

pub Expr: Expr = {
    Or,
};

Or: Expr = {
    <lhs: Or> "||" < rhs: And> => Expr::Binary(BinOp::Or , Box::new(lhs), Box::new(rhs)),
    And,
};

And: Expr = {
    <lhs: And> "&&" < rhs: Equality> => Expr::Binary(BinOp::And , Box::new(lhs), Box::new(rhs)),
    Equality,
};

Equality: Expr = {
    <lhs: Relational> "==" < rhs: Relational> => Expr::Binary(BinOp::Eq , Box::new(lhs), Box::new(rhs)),
    <lhs: Relational> "!=" < rhs: Relational> => Expr::Binary(BinOp::Ne , Box::new(lhs), Box::new(rhs)),
    Relational,
};

Relational: Expr = {
    <lhs: Add> "<" < rhs: Add> => Expr::Binary(BinOp::Lt , Box::new(lhs), Box::new(rhs)),
    <lhs: Add> "<=" < rhs: Add> => Expr::Binary(BinOp::Le , Box::new(lhs), Box::new(rhs)),
    <lhs: Add> ">" < rhs: Add> => Expr::Binary(BinOp::Lt , Box::new(rhs), Box::new(lhs)),
    <lhs: Add> ">=" < rhs: Add> => Expr::Binary(BinOp::Le , Box::new(rhs), Box::new(lhs)),
    Add,
};

Add: Expr = {
    <lhs: Add> "+" < rhs: Mul> => Expr::Binary(BinOp::Add , Box::new(lhs), Box::new(rhs)),
    <lhs: Add> "-" < rhs: Mul> => Expr::Binary(BinOp::Sub , Box::new(lhs), Box::new(rhs)),
    Mul,
};

Mul: Expr = {
    <lhs: Mul> "*" < rhs: Unary> => Expr::Binary(BinOp:: Mul, Box::new(lhs), Box::new(rhs)),
    <lhs: Mul> "/" < rhs: Unary> => Expr::Binary(BinOp:: Div, Box::new(lhs), Box::new(rhs)),
    Unary,
};

Unary: Expr = {
    "-" <p: Primary> => Expr::Unary(UnOp::Neg, Box::new(p)),
    "&" <u: Unary> => Expr::Unary(UnOp::Ref, Box::new(u)),
    "*" <u: Unary> => Expr::Unary(UnOp::Deref, Box::new(u)),
    Primary,
};

Primary: Expr = {
    Int => Expr::Int(<>),
    Bool => Expr::Bool(<>),
    Ident => Expr::Ident(<>),
    "(" <Expr> ")",
};


TypeSpecifier: TypeSpecifier = {
    TokVoid => TypeSpecifier::Void,
    TokChar => TypeSpecifier::Char,
    TokInt => TypeSpecifier::Int,
};


Declarator: Declarator = {
    Ident => Declarator::Ident(<>),
    "*" <d: Declarator> => Declarator::Pointer(Box::new(<>)),
};

pub Declaration: Declaration = {
    <t: TypeSpecifier> <d: Declarator> => Declaration {type_specifier: t, declarator: d},
}; 

pub Stmt: Stmt = {
    <d: Declaration> => Stmt::Declaration(d),
    <lhs: Expr> "=" <rhs: Expr> => Stmt::Assign(lhs, rhs),
    TokReturn <e: Expr>  => Stmt::Return(e),
};

pub BlockStmt: Vec<Stmt> = {
    "{" <stmts:(<Stmt> ";")*> "}" => stmts,
};

Int: u64 = {
    r"[0-9]+" => u64::from_str(<>).unwrap(),
};

Bool: bool = {
    TokTrue => true,
    TokFalse => false,
};

Ident: String = {
    r"[a-zA-Z][a-zA-Z0-9]*" => <>.to_string(),
};

match {
    r"true" => TokTrue,
    r"false" => TokFalse,

    r"void" => TokVoid,
    r"char" => TokChar,
    r"int" => TokInt,

    r"return" => TokReturn,
} else {
    _,
}
